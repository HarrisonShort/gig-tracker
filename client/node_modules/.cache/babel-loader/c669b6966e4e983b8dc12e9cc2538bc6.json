{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Harrison\\\\Documents\\\\JavaScript Projects\\\\Gig Tracker\\\\src\\\\components\\\\edit-gig.component.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as utils from \"../Utils.js\";\nexport default class EditGig extends Component {\n  constructor(props) {\n    // Super refers to the parent class' (Component) constructor.\n    // The \"this\" keyword cannot be used until after you have called the parent constructor.\n    super(props);\n\n    this.onSubmit = async event => {\n      event.preventDefault(); // Change any line breaks into a singular string of comma-separated band/artist names.\n\n      this.state.gig_bands = this.state.gig_bands.replace(/[\\n\\r]/g, ', '); // Create a new object containing our updated gig.\n\n      const updatedGig = {\n        gig_date: UtilityFunctions.formatFinalDate(this.state.gig_date, this.state.festival_end_date),\n        gig_or_fest: this.state.gig_or_fest,\n        gig_tourFestName: this.state.gig_tourFestName,\n        gig_bands: this.state.gig_bands,\n        gig_venue: this.state.gig_venue,\n        gig_cancelled: this.state.gig_cancelled\n      };\n      console.log(updatedGig); // Overwrite the existing data using the given ID.\n      // We await here because we want the changes to complete before the user sees the main page again.\n\n      await axios.post('http://localhost:4000/gigs/update/' + this.props.match.params.id, updatedGig).then(res => console.log(res.data)); // Change the display back to the main page (Gig List).\n\n      this.props.history.push('/gig-tracker/');\n    };\n\n    this.onChangeGigDate = this.onChangeGigDate.bind(this);\n    this.onChangeFestivalEndDate = this.onChangeFestivalEndDate.bind(this);\n    this.onChangeGigBands = this.onChangeGigBands.bind(this);\n    this.onChangeGigOrFest = this.onChangeGigOrFest.bind(this);\n    this.onChangeGigTourFestName = this.onChangeGigTourFestName.bind(this);\n    this.onChangeGigVenue = this.onChangeGigVenue.bind(this);\n    this.onChangeGigCancelled = this.onChangeGigCancelled.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      gig_date: new Date(),\n      festival_end_date: '',\n      gig_or_fest: '',\n      gig_tourFestName: '',\n      gig_bands: '',\n      gig_venue: '',\n      gig_cancelled: false\n    };\n  }\n\n  onChangeGigDate(event) {\n    this.setState({\n      gig_date: event\n    }, () => {\n      if (this.state.festival_end_date < this.state.gig_date) {\n        this.setState({\n          festival_end_date: this.state.gig_date\n        });\n      }\n    });\n  }\n\n  onChangeFestivalEndDate(event) {\n    if (event < this.state.gig_date) {\n      // TODO: Show some sort of error UI.\n      console.log('onChangeFestivalEndDate: End Date cannot be earlier than initial Date.');\n      return;\n    }\n\n    this.setState({\n      festival_end_date: event\n    });\n  }\n\n  onChangeGigOrFest(event) {\n    this.setState({\n      gig_or_fest: event.target.value\n    });\n  }\n\n  onChangeGigTourFestName(event) {\n    this.setState({\n      gig_tourFestName: event.target.value\n    });\n  }\n\n  onChangeGigBands(event) {\n    this.setState({\n      gig_bands: event.target.value\n    });\n  }\n\n  onChangeGigVenue(event) {\n    this.setState({\n      gig_venue: event.target.value\n    });\n  }\n\n  onChangeGigCancelled(event) {\n    this.setState({\n      gig_cancelled: !this.state.gig_cancelled\n    });\n  }\n\n  processReturnedDate(date) {\n    if (date === undefined) {\n      return new Date();\n    }\n\n    if (date.includes(\" - \")) {\n      var splitDate = date.split(\" - \");\n      return [new Date(splitDate[0]), new Date(splitDate[1])];\n    } else {\n      return new Date(date);\n    }\n  }\n\n  componentDidMount() {\n    // Get the gig from the DB based on the given ID and set it to the current state of the page.\n    axios.get('http://localhost:4000/gigs/' + this.props.match.params.id).then(response => {\n      var dates = this.processReturnedDate(response.data.gig_date);\n      this.setState({\n        gig_date: dates.length === undefined ? dates : dates[0],\n        festival_end_date: dates.length === undefined ? '' : dates[1],\n        gig_or_fest: response.data.gig_or_fest,\n        gig_tourFestName: response.data.gig_tourFestName,\n        // Put bands back on separate lines.\n        gig_bands: response.data.gig_bands.replace(/, /g, '\\n'),\n        gig_venue: response.data.gig_venue,\n        gig_cancelled: response.data.gig_cancelled === undefined ? false : response.data.gig_cancelled\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form\",\n      id: \"gigFormDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, \"Edit Gig\"), /*#__PURE__*/React.createElement(\"h3\", {\n      id: \"dateHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, \"Date\"), /*#__PURE__*/React.createElement(DatePicker, {\n      selected: this.state.gig_date,\n      dateFormat: \"d MMMM yyyy\",\n      onChange: this.onChangeGigDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }), this.state.gig_or_fest === 'Festival' ? /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginTop: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      id: \"endDateHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }, \"End Date\"), /*#__PURE__*/React.createElement(DatePicker, {\n      selected: this.state.festival_end_date,\n      dateFormat: \"d MMMM yyyy\",\n      onChange: this.onChangeFestivalEndDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 25\n      }\n    })) : null, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-check form-check-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-check-input\",\n      type: \"radio\",\n      name: \"gigOrFestivalRadios\",\n      id: \"gigRadio\",\n      value: \"Gig\",\n      checked: this.state.gig_or_fest === 'Gig',\n      onChange: this.onChangeGigOrFest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"form-check-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 29\n      }\n    }, \"Gig\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-check form-check-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-check-input\",\n      type: \"radio\",\n      name: \"gigOrFestivalRadios\",\n      id: \"festivalRadio\",\n      value: \"Festival\",\n      checked: this.state.gig_or_fest === 'Festival',\n      onChange: this.onChangeGigOrFest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"form-check-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 29\n      }\n    }, \"Festival\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 25\n      }\n    }, \"Tour Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      value: this.state.gig_tourFestName,\n      onChange: this.onChangeGigTourFestName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, \"Bands: \"), /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      className: \"form-control\",\n      value: this.state.gig_bands,\n      onChange: this.onChangeGigBands,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      id: \"bandHelp\",\n      className: \"form-text text-muted\",\n      style: {\n        marginTop: 2\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 25\n      }\n    }, \"Please place each band/artist on a new line.\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 25\n      }\n    }, \"Venue: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"venueName\",\n      name: \"venueName\",\n      type: \"text\",\n      className: \"form-control\",\n      value: this.state.gig_venue,\n      onChange: this.onChangeGigVenue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-check-input\",\n      id: \"gigCancelledCheckbox\",\n      type: \"checkbox\",\n      name: \"gigCancelledCheckbox\",\n      onChange: this.onChangeGigCancelled,\n      checked: this.state.gig_cancelled,\n      value: this.state.gig_cancelled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"form-check-label\",\n      htmlFor: \"gigCancelledCheckbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }\n    }, \"Cancelled\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Edit Gig\",\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Harrison/Documents/JavaScript Projects/Gig Tracker/src/components/edit-gig.component.js"],"names":["React","Component","axios","DatePicker","utils","EditGig","constructor","props","onSubmit","event","preventDefault","state","gig_bands","replace","updatedGig","gig_date","UtilityFunctions","formatFinalDate","festival_end_date","gig_or_fest","gig_tourFestName","gig_venue","gig_cancelled","console","log","post","match","params","id","then","res","data","history","push","onChangeGigDate","bind","onChangeFestivalEndDate","onChangeGigBands","onChangeGigOrFest","onChangeGigTourFestName","onChangeGigVenue","onChangeGigCancelled","Date","setState","target","value","processReturnedDate","date","undefined","includes","splitDate","split","componentDidMount","get","response","dates","length","catch","error","render","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,4CAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AAEA,eAAe,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC3CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA;AACA,UAAMA,KAAN;;AAHe,SA+EnBC,QA/EmB,GA+ER,MAAOC,KAAP,IAAiB;AACxBA,MAAAA,KAAK,CAACC,cAAN,GADwB,CAGxB;;AACA,WAAKC,KAAL,CAAWC,SAAX,GAAuB,KAAKD,KAAL,CAAWC,SAAX,CAAqBC,OAArB,CAA6B,SAA7B,EAAwC,IAAxC,CAAvB,CAJwB,CAMxB;;AACA,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEC,gBAAgB,CAACC,eAAjB,CAAiC,KAAKN,KAAL,CAAWI,QAA5C,EAAsD,KAAKJ,KAAL,CAAWO,iBAAjE,CADK;AAEfC,QAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWQ,WAFT;AAGfC,QAAAA,gBAAgB,EAAE,KAAKT,KAAL,CAAWS,gBAHd;AAIfR,QAAAA,SAAS,EAAE,KAAKD,KAAL,CAAWC,SAJP;AAKfS,QAAAA,SAAS,EAAE,KAAKV,KAAL,CAAWU,SALP;AAMfC,QAAAA,aAAa,EAAE,KAAKX,KAAL,CAAWW;AANX,OAAnB;AAQAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ,EAfwB,CAiBxB;AACA;;AACA,YAAMZ,KAAK,CAACuB,IAAN,CAAW,uCAAuC,KAAKlB,KAAL,CAAWmB,KAAX,CAAiBC,MAAjB,CAAwBC,EAA1E,EAA8Ed,UAA9E,EACDe,IADC,CACIC,GAAG,IAAIP,OAAO,CAACC,GAAR,CAAYM,GAAG,CAACC,IAAhB,CADX,CAAN,CAnBwB,CAsBxB;;AACA,WAAKxB,KAAL,CAAWyB,OAAX,CAAmBC,IAAnB,CAAwB,eAAxB;AACH,KAvGkB;;AAKf,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BD,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKE,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKG,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBH,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKI,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BJ,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKK,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBL,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKM,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BN,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAK3B,QAAL,GAAgB,KAAKA,QAAL,CAAc2B,IAAd,CAAmB,IAAnB,CAAhB;AAEA,SAAKxB,KAAL,GAAa;AACTI,MAAAA,QAAQ,EAAE,IAAI2B,IAAJ,EADD;AAETxB,MAAAA,iBAAiB,EAAE,EAFV;AAGTC,MAAAA,WAAW,EAAE,EAHJ;AAITC,MAAAA,gBAAgB,EAAE,EAJT;AAKTR,MAAAA,SAAS,EAAE,EALF;AAMTS,MAAAA,SAAS,EAAE,EANF;AAOTC,MAAAA,aAAa,EAAE;AAPN,KAAb;AASH;;AAEDY,EAAAA,eAAe,CAACzB,KAAD,EAAQ;AACnB,SAAKkC,QAAL,CAAc;AACV5B,MAAAA,QAAQ,EAAEN;AADA,KAAd,EAEG,MAAM;AACL,UAAI,KAAKE,KAAL,CAAWO,iBAAX,GAA+B,KAAKP,KAAL,CAAWI,QAA9C,EAAwD;AACpD,aAAK4B,QAAL,CAAc;AACVzB,UAAAA,iBAAiB,EAAE,KAAKP,KAAL,CAAWI;AADpB,SAAd;AAGH;AACJ,KARD;AASH;;AAEDqB,EAAAA,uBAAuB,CAAC3B,KAAD,EAAQ;AAC3B,QAAIA,KAAK,GAAG,KAAKE,KAAL,CAAWI,QAAvB,EAAiC;AAC7B;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,wEAAZ;AACA;AACH;;AAED,SAAKmB,QAAL,CAAc;AACVzB,MAAAA,iBAAiB,EAAET;AADT,KAAd;AAGH;;AAED6B,EAAAA,iBAAiB,CAAC7B,KAAD,EAAQ;AACrB,SAAKkC,QAAL,CAAc;AACVxB,MAAAA,WAAW,EAAEV,KAAK,CAACmC,MAAN,CAAaC;AADhB,KAAd;AAGH;;AAEDN,EAAAA,uBAAuB,CAAC9B,KAAD,EAAQ;AAC3B,SAAKkC,QAAL,CAAc;AACVvB,MAAAA,gBAAgB,EAAEX,KAAK,CAACmC,MAAN,CAAaC;AADrB,KAAd;AAGH;;AAEDR,EAAAA,gBAAgB,CAAC5B,KAAD,EAAQ;AACpB,SAAKkC,QAAL,CAAc;AACV/B,MAAAA,SAAS,EAAEH,KAAK,CAACmC,MAAN,CAAaC;AADd,KAAd;AAGH;;AAEDL,EAAAA,gBAAgB,CAAC/B,KAAD,EAAQ;AACpB,SAAKkC,QAAL,CAAc;AACVtB,MAAAA,SAAS,EAAEZ,KAAK,CAACmC,MAAN,CAAaC;AADd,KAAd;AAGH;;AAEDJ,EAAAA,oBAAoB,CAAChC,KAAD,EAAQ;AACxB,SAAKkC,QAAL,CAAc;AACVrB,MAAAA,aAAa,EAAE,CAAC,KAAKX,KAAL,CAAWW;AADjB,KAAd;AAGH;;AA4BDwB,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AACtB,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AACpB,aAAO,IAAIN,IAAJ,EAAP;AACH;;AAED,QAAIK,IAAI,CAACE,QAAL,CAAc,KAAd,CAAJ,EAA0B;AACtB,UAAIC,SAAS,GAAGH,IAAI,CAACI,KAAL,CAAW,KAAX,CAAhB;AACA,aAAO,CAAC,IAAIT,IAAJ,CAASQ,SAAS,CAAC,CAAD,CAAlB,CAAD,EAAyB,IAAIR,IAAJ,CAASQ,SAAS,CAAC,CAAD,CAAlB,CAAzB,CAAP;AACH,KAHD,MAGO;AACH,aAAO,IAAIR,IAAJ,CAASK,IAAT,CAAP;AACH;AACJ;;AAEDK,EAAAA,iBAAiB,GAAG;AAChB;AACAlD,IAAAA,KAAK,CAACmD,GAAN,CAAU,gCAAgC,KAAK9C,KAAL,CAAWmB,KAAX,CAAiBC,MAAjB,CAAwBC,EAAlE,EACKC,IADL,CACUyB,QAAQ,IAAI;AACd,UAAIC,KAAK,GAAG,KAAKT,mBAAL,CAAyBQ,QAAQ,CAACvB,IAAT,CAAchB,QAAvC,CAAZ;AAEA,WAAK4B,QAAL,CAAc;AACV5B,QAAAA,QAAQ,EAAEwC,KAAK,CAACC,MAAN,KAAiBR,SAAjB,GAA6BO,KAA7B,GAAqCA,KAAK,CAAC,CAAD,CAD1C;AAEVrC,QAAAA,iBAAiB,EAAEqC,KAAK,CAACC,MAAN,KAAiBR,SAAjB,GAA6B,EAA7B,GAAkCO,KAAK,CAAC,CAAD,CAFhD;AAGVpC,QAAAA,WAAW,EAAEmC,QAAQ,CAACvB,IAAT,CAAcZ,WAHjB;AAIVC,QAAAA,gBAAgB,EAAEkC,QAAQ,CAACvB,IAAT,CAAcX,gBAJtB;AAMV;AACAR,QAAAA,SAAS,EAAE0C,QAAQ,CAACvB,IAAT,CAAcnB,SAAd,CAAwBC,OAAxB,CAAgC,KAAhC,EAAuC,IAAvC,CAPD;AAQVQ,QAAAA,SAAS,EAAEiC,QAAQ,CAACvB,IAAT,CAAcV,SARf;AASVC,QAAAA,aAAa,EAAEgC,QAAQ,CAACvB,IAAT,CAAcT,aAAd,KAAgC0B,SAAhC,GAA4C,KAA5C,GAAoDM,QAAQ,CAACvB,IAAT,CAAcT;AATvE,OAAd;AAWH,KAfL,EAgBKmC,KAhBL,CAgBW,UAAUC,KAAV,EAAiB;AACpBnC,MAAAA,OAAO,CAACC,GAAR,CAAYkC,KAAZ;AACH,KAlBL;AAmBH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,EAAE,EAAC,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAI,MAAA,EAAE,EAAC,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,oBAAC,UAAD;AACI,MAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWI,QADzB;AAEI,MAAA,UAAU,EAAE,aAFhB;AAGI,MAAA,QAAQ,EAAE,KAAKmB,eAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAQK,KAAKvB,KAAL,CAAWQ,WAAX,KAA2B,UAA3B,gBACG;AAAK,MAAA,KAAK,EAAE;AAAEyC,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,EAAE,EAAC,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,oBAAC,UAAD;AACI,MAAA,QAAQ,EAAE,KAAKjD,KAAL,CAAWO,iBADzB;AAEI,MAAA,UAAU,EAAE,aAFhB;AAGI,MAAA,QAAQ,EAAE,KAAKkB,uBAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADH,GASK,IAjBV,eAkBI;AAAM,MAAA,QAAQ,EAAE,KAAK5B,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,IAAI,EAAC,qBAFT;AAGI,MAAA,EAAE,EAAC,UAHP;AAII,MAAA,KAAK,EAAC,KAJV;AAKI,MAAA,OAAO,EAAE,KAAKG,KAAL,CAAWQ,WAAX,KAA2B,KALxC;AAMI,MAAA,QAAQ,EAAE,KAAKmB,iBANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eASI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aATJ,CADJ,eAYI;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,IAAI,EAAC,qBAFT;AAGI,MAAA,EAAE,EAAC,eAHP;AAII,MAAA,KAAK,EAAC,UAJV;AAKI,MAAA,OAAO,EAAE,KAAK3B,KAAL,CAAWQ,WAAX,KAA2B,UALxC;AAMI,MAAA,QAAQ,EAAE,KAAKmB,iBANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eASI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ,CAZJ,CADJ,eAyBI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AACI,MAAA,SAAS,EAAC,cADd;AAEI,MAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWS,gBAFtB;AAGI,MAAA,QAAQ,EAAE,KAAKmB,uBAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAzBJ,eAiCI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,SAAS,EAAC,cAFd;AAGI,MAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWC,SAHtB;AAII,MAAA,QAAQ,EAAE,KAAKyB,gBAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAQI;AAAO,MAAA,EAAE,EAAC,UAAV;AACI,MAAA,SAAS,EAAC,sBADd;AAEI,MAAA,KAAK,EAAE;AAAEuB,QAAAA,SAAS,EAAE;AAAb,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDARJ,CAjCJ,eA+CI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AACI,MAAA,EAAE,EAAC,WADP;AAEI,MAAA,IAAI,EAAC,WAFT;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,SAAS,EAAC,cAJd;AAKI,MAAA,KAAK,EAAE,KAAKjD,KAAL,CAAWU,SALtB;AAMI,MAAA,QAAQ,EAAE,KAAKmB,gBANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CA/CJ,eA2DI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AACI,MAAA,EAAE,EAAC,sBADP;AAEI,MAAA,IAAI,EAAC,UAFT;AAGI,MAAA,IAAI,EAAC,sBAHT;AAII,MAAA,QAAQ,EAAE,KAAKC,oBAJnB;AAKI,MAAA,OAAO,EAAE,KAAK9B,KAAL,CAAWW,aALxB;AAMI,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWW,aANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eASI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAoC,MAAA,OAAO,EAAC,sBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATJ,CA3DJ,eAwEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxEJ,eA0EI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,UAA3B;AAAsC,MAAA,SAAS,EAAC,iBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CA1EJ,CAlBJ,CADJ;AAmGH;;AAlP0C","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport * as utils from \"../Utils.js\";\r\n\r\nexport default class EditGig extends Component {\r\n    constructor(props) {\r\n        // Super refers to the parent class' (Component) constructor.\r\n        // The \"this\" keyword cannot be used until after you have called the parent constructor.\r\n        super(props);\r\n\r\n        this.onChangeGigDate = this.onChangeGigDate.bind(this);\r\n        this.onChangeFestivalEndDate = this.onChangeFestivalEndDate.bind(this);\r\n        this.onChangeGigBands = this.onChangeGigBands.bind(this);\r\n        this.onChangeGigOrFest = this.onChangeGigOrFest.bind(this);\r\n        this.onChangeGigTourFestName = this.onChangeGigTourFestName.bind(this);\r\n        this.onChangeGigVenue = this.onChangeGigVenue.bind(this);\r\n        this.onChangeGigCancelled = this.onChangeGigCancelled.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            gig_date: new Date(),\r\n            festival_end_date: '',\r\n            gig_or_fest: '',\r\n            gig_tourFestName: '',\r\n            gig_bands: '',\r\n            gig_venue: '',\r\n            gig_cancelled: false\r\n        }\r\n    }\r\n\r\n    onChangeGigDate(event) {\r\n        this.setState({\r\n            gig_date: event\r\n        }, () => {\r\n            if (this.state.festival_end_date < this.state.gig_date) {\r\n                this.setState({\r\n                    festival_end_date: this.state.gig_date\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    onChangeFestivalEndDate(event) {\r\n        if (event < this.state.gig_date) {\r\n            // TODO: Show some sort of error UI.\r\n            console.log('onChangeFestivalEndDate: End Date cannot be earlier than initial Date.');\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            festival_end_date: event\r\n        });\r\n    }\r\n\r\n    onChangeGigOrFest(event) {\r\n        this.setState({\r\n            gig_or_fest: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigTourFestName(event) {\r\n        this.setState({\r\n            gig_tourFestName: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigBands(event) {\r\n        this.setState({\r\n            gig_bands: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigVenue(event) {\r\n        this.setState({\r\n            gig_venue: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigCancelled(event) {\r\n        this.setState({\r\n            gig_cancelled: !this.state.gig_cancelled\r\n        });\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Change any line breaks into a singular string of comma-separated band/artist names.\r\n        this.state.gig_bands = this.state.gig_bands.replace(/[\\n\\r]/g, ', ');\r\n\r\n        // Create a new object containing our updated gig.\r\n        const updatedGig = {\r\n            gig_date: UtilityFunctions.formatFinalDate(this.state.gig_date, this.state.festival_end_date),\r\n            gig_or_fest: this.state.gig_or_fest,\r\n            gig_tourFestName: this.state.gig_tourFestName,\r\n            gig_bands: this.state.gig_bands,\r\n            gig_venue: this.state.gig_venue,\r\n            gig_cancelled: this.state.gig_cancelled\r\n        };\r\n        console.log(updatedGig);\r\n\r\n        // Overwrite the existing data using the given ID.\r\n        // We await here because we want the changes to complete before the user sees the main page again.\r\n        await axios.post('http://localhost:4000/gigs/update/' + this.props.match.params.id, updatedGig)\r\n            .then(res => console.log(res.data));\r\n\r\n        // Change the display back to the main page (Gig List).\r\n        this.props.history.push('/gig-tracker/');\r\n    }\r\n\r\n    processReturnedDate(date) {\r\n        if (date === undefined) {\r\n            return new Date();\r\n        }\r\n\r\n        if (date.includes(\" - \")) {\r\n            var splitDate = date.split(\" - \");\r\n            return [new Date(splitDate[0]), new Date(splitDate[1])];\r\n        } else {\r\n            return new Date(date);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Get the gig from the DB based on the given ID and set it to the current state of the page.\r\n        axios.get('http://localhost:4000/gigs/' + this.props.match.params.id)\r\n            .then(response => {\r\n                var dates = this.processReturnedDate(response.data.gig_date);\r\n\r\n                this.setState({\r\n                    gig_date: dates.length === undefined ? dates : dates[0],\r\n                    festival_end_date: dates.length === undefined ? '' : dates[1],\r\n                    gig_or_fest: response.data.gig_or_fest,\r\n                    gig_tourFestName: response.data.gig_tourFestName,\r\n\r\n                    // Put bands back on separate lines.\r\n                    gig_bands: response.data.gig_bands.replace(/, /g, '\\n'),\r\n                    gig_venue: response.data.gig_venue,\r\n                    gig_cancelled: response.data.gig_cancelled === undefined ? false : response.data.gig_cancelled\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form\" id=\"gigFormDiv\">\r\n                <h3>Edit Gig</h3>\r\n                <h3 id=\"dateHeader\">Date</h3>\r\n                <DatePicker\r\n                    selected={this.state.gig_date}\r\n                    dateFormat={\"d MMMM yyyy\"}\r\n                    onChange={this.onChangeGigDate}\r\n                />\r\n                {this.state.gig_or_fest === 'Festival' ?\r\n                    <div style={{ marginTop: 30 }}>\r\n                        <h4 id=\"endDateHeader\">End Date</h4>\r\n                        <DatePicker\r\n                            selected={this.state.festival_end_date}\r\n                            dateFormat={\"d MMMM yyyy\"}\r\n                            onChange={this.onChangeFestivalEndDate}\r\n                        />\r\n                    </div>\r\n                    : null}\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\"\r\n                                type=\"radio\"\r\n                                name=\"gigOrFestivalRadios\"\r\n                                id=\"gigRadio\"\r\n                                value=\"Gig\"\r\n                                checked={this.state.gig_or_fest === 'Gig'}\r\n                                onChange={this.onChangeGigOrFest}\r\n                            />\r\n                            <label className=\"form-check-label\">Gig</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\"\r\n                                type=\"radio\"\r\n                                name=\"gigOrFestivalRadios\"\r\n                                id=\"festivalRadio\"\r\n                                value=\"Festival\"\r\n                                checked={this.state.gig_or_fest === 'Festival'}\r\n                                onChange={this.onChangeGigOrFest}\r\n                            />\r\n                            <label className=\"form-check-label\">Festival</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Tour Name: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.gig_tourFestName}\r\n                            onChange={this.onChangeGigTourFestName}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Bands: </label>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.gig_bands}\r\n                            onChange={this.onChangeGigBands}\r\n                        />\r\n                        <small id=\"bandHelp\"\r\n                            className=\"form-text text-muted\"\r\n                            style={{ marginTop: 2 }}>\r\n                            Please place each band/artist on a new line.\r\n                                    </small>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Venue: </label>\r\n                        <input\r\n                            id=\"venueName\"\r\n                            name=\"venueName\"\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.gig_venue}\r\n                            onChange={this.onChangeGigVenue}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <input className=\"form-check-input\"\r\n                            id=\"gigCancelledCheckbox\"\r\n                            type=\"checkbox\"\r\n                            name=\"gigCancelledCheckbox\"\r\n                            onChange={this.onChangeGigCancelled}\r\n                            checked={this.state.gig_cancelled}\r\n                            value={this.state.gig_cancelled}\r\n                        />\r\n                        <label className=\"form-check-label\" htmlFor=\"gigCancelledCheckbox\">\r\n                            Cancelled\r\n                        </label>\r\n                    </div>\r\n                    <br />\r\n\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Edit Gig\" className=\"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}