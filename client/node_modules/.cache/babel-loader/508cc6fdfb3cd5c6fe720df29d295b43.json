{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Harrison\\\\Documents\\\\JavaScript Projects\\\\Gig Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Harrison\\\\Documents\\\\JavaScript Projects\\\\Gig Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:\\\\Users\\\\Harrison\\\\Documents\\\\JavaScript Projects\\\\Gig Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Harrison\\\\Documents\\\\JavaScript Projects\\\\Gig Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\Harrison\\\\Documents\\\\JavaScript Projects\\\\Gig Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _createSuper from\"C:\\\\Users\\\\Harrison\\\\Documents\\\\JavaScript Projects\\\\Gig Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"C:\\\\Users\\\\Harrison\\\\Documents\\\\JavaScript Projects\\\\Gig Tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import axios from'axios';import DatePicker from\"react-datepicker\";import\"react-datepicker/dist/react-datepicker.css\";import{formatGigDate}from\"../Utils.js\";var EditGig=/*#__PURE__*/function(_Component){_inherits(EditGig,_Component);var _super=_createSuper(EditGig);function EditGig(props){var _this;_classCallCheck(this,EditGig);// Super refers to the parent class' (Component) constructor.\n// The \"this\" keyword cannot be used until after you have called the parent constructor.\n_this=_super.call(this,props);_this.onSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var updatedGig;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();// Change any line breaks into a singular string of comma-separated band/artist names.\n_this.state.gig_bands=_this.state.gig_bands.replace(/[\\n\\r]/g,', ');// Create a new object containing our updated gig.\nupdatedGig={gig_date:formatGigDate(_this.state.gig_date),gig_or_fest:_this.state.gig_or_fest,gig_tourFestName:_this.state.gig_tourFestName,gig_bands:_this.state.gig_bands,gig_venue:_this.state.gig_venue,gig_cancelled:_this.state.gig_cancelled};console.log(updatedGig);// Overwrite the existing data using the given ID.\n// We await here because we want the changes to complete before the user sees the main page again.\n_context.next=6;return axios.post('http://localhost:4000/gigs/update/'+_this.props.match.params.id,updatedGig).then(function(res){return console.log(res.data);});case 6:// Change the display back to the main page (Gig List).\n_this.props.history.push('/');case 7:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.onChangeGigDate=_this.onChangeGigDate.bind(_assertThisInitialized(_this));_this.onChangeGigBands=_this.onChangeGigBands.bind(_assertThisInitialized(_this));_this.onChangeGigOrFest=_this.onChangeGigOrFest.bind(_assertThisInitialized(_this));_this.onChangeGigTourFestName=_this.onChangeGigTourFestName.bind(_assertThisInitialized(_this));_this.onChangeGigVenue=_this.onChangeGigVenue.bind(_assertThisInitialized(_this));_this.onChangeGigCancelled=_this.onChangeGigCancelled.bind(_assertThisInitialized(_this));_this.onSubmit=_this.onSubmit.bind(_assertThisInitialized(_this));_this.state={gig_date:Date.now(),gig_or_fest:'',gig_tourFestName:'',gig_bands:'',gig_venue:'',gig_cancelled:false};return _this;}_createClass(EditGig,[{key:\"onChangeGigDate\",value:function onChangeGigDate(event){this.setState({gig_date:event});}},{key:\"onChangeGigOrFest\",value:function onChangeGigOrFest(event){this.setState({gig_or_fest:event.target.value});}},{key:\"onChangeGigTourFestName\",value:function onChangeGigTourFestName(event){this.setState({gig_tourFestName:event.target.value});}},{key:\"onChangeGigBands\",value:function onChangeGigBands(event){this.setState({gig_bands:event.target.value});}},{key:\"onChangeGigVenue\",value:function onChangeGigVenue(event){this.setState({gig_venue:event.target.value});}},{key:\"onChangeGigCancelled\",value:function onChangeGigCancelled(event){this.setState({gig_cancelled:!this.state.gig_cancelled});}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// Get the gig from the DB based on the given ID and set it to the current state of the page.\naxios.get('http://localhost:4000/gigs/'+this.props.match.params.id).then(function(response){_this2.setState({gig_date:response.data.gig_date===undefined?Date.now():new Date(response.data.gig_date),gig_or_fest:response.data.gig_or_fest,gig_tourFestName:response.data.gig_tourFestName,// Put bands back on separate lines.\ngig_bands:response.data.gig_bands.replace(/, /g,'\\n'),gig_venue:response.data.gig_venue,gig_cancelled:response.data.gig_cancelled===undefined?false:response.data.gig_cancelled});}).catch(function(error){console.log(error);});}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"form\",id:\"gigFormDiv\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Edit Gig\"),/*#__PURE__*/React.createElement(\"h3\",{id:\"dateHeader\"},\"Date\"),/*#__PURE__*/React.createElement(DatePicker,{selected:this.state.gig_date,dateFormat:\"d MMMM yyyy\",onChange:this.onChangeGigDate}),/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.onSubmit},/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"div\",{className:\"form-check form-check-inline\"},/*#__PURE__*/React.createElement(\"input\",{className:\"form-check-input\",type:\"radio\",name:\"gigOrFestivalRadios\",id:\"gigRadio\",value:\"Gig\",checked:this.state.gig_or_fest==='Gig',onChange:this.onChangeGigOrFest}),/*#__PURE__*/React.createElement(\"label\",{className:\"form-check-label\"},\"Gig\")),/*#__PURE__*/React.createElement(\"div\",{className:\"form-check form-check-inline\"},/*#__PURE__*/React.createElement(\"input\",{className:\"form-check-input\",type:\"radio\",name:\"gigOrFestivalRadios\",id:\"festivalRadio\",value:\"Festival\",checked:this.state.gig_or_fest==='Festival',onChange:this.onChangeGigOrFest}),/*#__PURE__*/React.createElement(\"label\",{className:\"form-check-label\"},\"Festival\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",null,\"Tour Name: \"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"form-control\",value:this.state.gig_tourFestName,onChange:this.onChangeGigTourFestName})),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",null,\"Bands: \"),/*#__PURE__*/React.createElement(\"textarea\",{type:\"text\",className:\"form-control\",value:this.state.gig_bands,onChange:this.onChangeGigBands}),/*#__PURE__*/React.createElement(\"small\",{id:\"bandHelp\",className:\"form-text text-muted\",style:{marginTop:2}},\"Please place each band/artist on a new line.\")),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"label\",null,\"Venue: \"),/*#__PURE__*/React.createElement(\"input\",{id:\"venueName\",name:\"venueName\",type:\"text\",className:\"form-control\",value:this.state.gig_venue,onChange:this.onChangeGigVenue})),/*#__PURE__*/React.createElement(\"div\",{className:\"form-check\"},/*#__PURE__*/React.createElement(\"input\",{className:\"form-check-input\",id:\"gigCancelledCheckbox\",type:\"checkbox\",name:\"gigCancelledCheckbox\",onChange:this.onChangeGigCancelled,checked:this.state.gig_cancelled,value:this.state.gig_cancelled}),/*#__PURE__*/React.createElement(\"label\",{className:\"form-check-label\",htmlFor:\"gigCancelledCheckbox\"},\"Cancelled\")),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"div\",{className:\"form-group\"},/*#__PURE__*/React.createElement(\"input\",{type:\"submit\",value:\"Edit Gig\",className:\"btn btn-primary\"}))));}}]);return EditGig;}(Component);export{EditGig as default};","map":{"version":3,"sources":["C:/Users/Harrison/Documents/JavaScript Projects/Gig Tracker/src/components/edit-gig.component.js"],"names":["React","Component","axios","DatePicker","formatGigDate","EditGig","props","onSubmit","event","preventDefault","state","gig_bands","replace","updatedGig","gig_date","gig_or_fest","gig_tourFestName","gig_venue","gig_cancelled","console","log","post","match","params","id","then","res","data","history","push","onChangeGigDate","bind","onChangeGigBands","onChangeGigOrFest","onChangeGigTourFestName","onChangeGigVenue","onChangeGigCancelled","Date","now","setState","target","value","get","response","undefined","catch","error","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { formatGigDate } from \"../Utils.js\";\r\n\r\nexport default class EditGig extends Component {\r\n    constructor(props) {\r\n        // Super refers to the parent class' (Component) constructor.\r\n        // The \"this\" keyword cannot be used until after you have called the parent constructor.\r\n        super(props);\r\n\r\n        this.onChangeGigDate = this.onChangeGigDate.bind(this);\r\n        this.onChangeGigBands = this.onChangeGigBands.bind(this);\r\n        this.onChangeGigOrFest = this.onChangeGigOrFest.bind(this);\r\n        this.onChangeGigTourFestName = this.onChangeGigTourFestName.bind(this);\r\n        this.onChangeGigVenue = this.onChangeGigVenue.bind(this);\r\n        this.onChangeGigCancelled = this.onChangeGigCancelled.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            gig_date: Date.now(),\r\n            gig_or_fest: '',\r\n            gig_tourFestName: '',\r\n            gig_bands: '',\r\n            gig_venue: '',\r\n            gig_cancelled: false\r\n        }\r\n    }\r\n\r\n    onChangeGigDate(event) {\r\n        this.setState({\r\n            gig_date: event\r\n        });\r\n    }\r\n\r\n    onChangeGigOrFest(event) {\r\n        this.setState({\r\n            gig_or_fest: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigTourFestName(event) {\r\n        this.setState({\r\n            gig_tourFestName: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigBands(event) {\r\n        this.setState({\r\n            gig_bands: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigVenue(event) {\r\n        this.setState({\r\n            gig_venue: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigCancelled(event) {\r\n        this.setState({\r\n            gig_cancelled: !this.state.gig_cancelled\r\n        });\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Change any line breaks into a singular string of comma-separated band/artist names.\r\n        this.state.gig_bands = this.state.gig_bands.replace(/[\\n\\r]/g, ', ');\r\n\r\n        // Create a new object containing our updated gig.\r\n        const updatedGig = {\r\n            gig_date: formatGigDate(this.state.gig_date),\r\n            gig_or_fest: this.state.gig_or_fest,\r\n            gig_tourFestName: this.state.gig_tourFestName,\r\n            gig_bands: this.state.gig_bands,\r\n            gig_venue: this.state.gig_venue,\r\n            gig_cancelled: this.state.gig_cancelled\r\n        };\r\n        console.log(updatedGig);\r\n\r\n        // Overwrite the existing data using the given ID.\r\n        // We await here because we want the changes to complete before the user sees the main page again.\r\n        await axios.post('http://localhost:4000/gigs/update/' + this.props.match.params.id, updatedGig)\r\n            .then(res => console.log(res.data));\r\n\r\n        // Change the display back to the main page (Gig List).\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Get the gig from the DB based on the given ID and set it to the current state of the page.\r\n        axios.get('http://localhost:4000/gigs/' + this.props.match.params.id)\r\n            .then(response => {\r\n                this.setState({\r\n                    gig_date: response.data.gig_date === undefined ? Date.now() : new Date(response.data.gig_date),\r\n                    gig_or_fest: response.data.gig_or_fest,\r\n                    gig_tourFestName: response.data.gig_tourFestName,\r\n\r\n                    // Put bands back on separate lines.\r\n                    gig_bands: response.data.gig_bands.replace(/, /g, '\\n'),\r\n                    gig_venue: response.data.gig_venue,\r\n                    gig_cancelled: response.data.gig_cancelled === undefined ? false : response.data.gig_cancelled\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form\" id=\"gigFormDiv\">\r\n                <h3>Edit Gig</h3>\r\n                <h3 id=\"dateHeader\">Date</h3>\r\n                <DatePicker\r\n                    selected={this.state.gig_date}\r\n                    dateFormat={\"d MMMM yyyy\"}\r\n                    onChange={this.onChangeGigDate}\r\n                />\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\"\r\n                                type=\"radio\"\r\n                                name=\"gigOrFestivalRadios\"\r\n                                id=\"gigRadio\"\r\n                                value=\"Gig\"\r\n                                checked={this.state.gig_or_fest === 'Gig'}\r\n                                onChange={this.onChangeGigOrFest}\r\n                            />\r\n                            <label className=\"form-check-label\">Gig</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\"\r\n                                type=\"radio\"\r\n                                name=\"gigOrFestivalRadios\"\r\n                                id=\"festivalRadio\"\r\n                                value=\"Festival\"\r\n                                checked={this.state.gig_or_fest === 'Festival'}\r\n                                onChange={this.onChangeGigOrFest}\r\n                            />\r\n                            <label className=\"form-check-label\">Festival</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Tour Name: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.gig_tourFestName}\r\n                            onChange={this.onChangeGigTourFestName}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Bands: </label>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.gig_bands}\r\n                            onChange={this.onChangeGigBands}\r\n                        />\r\n                        <small id=\"bandHelp\"\r\n                            className=\"form-text text-muted\"\r\n                            style={{ marginTop: 2 }}>\r\n                            Please place each band/artist on a new line.\r\n                                    </small>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Venue: </label>\r\n                        <input\r\n                            id=\"venueName\"\r\n                            name=\"venueName\"\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.gig_venue}\r\n                            onChange={this.onChangeGigVenue}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <input className=\"form-check-input\"\r\n                            id=\"gigCancelledCheckbox\"\r\n                            type=\"checkbox\"\r\n                            name=\"gigCancelledCheckbox\"\r\n                            onChange={this.onChangeGigCancelled}\r\n                            checked={this.state.gig_cancelled}\r\n                            value={this.state.gig_cancelled}\r\n                        />\r\n                        <label className=\"form-check-label\" htmlFor=\"gigCancelledCheckbox\">\r\n                            Cancelled\r\n                        </label>\r\n                    </div>\r\n                    <br />\r\n\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Edit Gig\" className=\"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}