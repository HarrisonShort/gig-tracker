{"version":3,"sources":["Utils.js","components/create-gig.component.js","components/edit-gig.component.js","components/gig-list.component.js","components/delete-gig.component.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["formatGigDate","rawDate","month","Intl","DateTimeFormat","format","getDate","getFullYear","CreateGig","props","onSubmit","event","a","preventDefault","state","gig_bands","replace","newGig","gig_date","gig_or_fest","gig_tourFestName","gig_venue","gig_cancelled","console","log","axios","post","then","res","data","setState","Date","now","onChangeGigDate","bind","onChangeGigOrFest","onChangeGigTourFestName","onChangeGigBands","onChangeGigVenue","this","target","value","className","id","style","marginTop","selected","dateFormat","onChange","type","name","checked","Component","EditGig","updatedGig","match","params","history","push","onChangeGigCancelled","get","response","undefined","catch","error","htmlFor","Gig","gig","to","_id","onClick","window","confirm","location","href","GigList","gigs","sort","b","map","currentGig","i","key","width","gigList","DeleteGig","deleteGig","delete","App","src","logo","height","path","exact","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.b76a3231.chunk.js","sourcesContent":["export const formatGigDate = (rawDate) => {\r\n    // Get the month spelled out (not int value).\r\n    var options = { month: 'long' };\r\n    var month = new Intl.DateTimeFormat('en-US', options).format(rawDate);\r\n\r\n    return `${rawDate.getDate()} ${month} ${rawDate.getFullYear()}`;\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { formatGigDate } from \"../Utils.js\";\r\n\r\nexport default class CreateGig extends Component {\r\n    constructor(props) {\r\n        // Super refers to the parent class' (Component) constructor.\r\n        // The \"this\" keyword cannot be used until after you have called the parent constructor.\r\n        super(props);\r\n\r\n        this.state = {\r\n            gig_date: Date.now(),\r\n            gig_or_fest: 'Gig',\r\n            gig_tourFestName: '',\r\n            gig_bands: '',\r\n            gig_venue: '',\r\n            gig_cancelled: false\r\n        }\r\n\r\n        this.onChangeGigDate = this.onChangeGigDate.bind(this);\r\n        this.onChangeGigOrFest = this.onChangeGigOrFest.bind(this);\r\n        this.onChangeGigTourFestName = this.onChangeGigTourFestName.bind(this);\r\n        this.onChangeGigBands = this.onChangeGigBands.bind(this);\r\n        this.onChangeGigVenue = this.onChangeGigVenue.bind(this);\r\n        //this.changeToTourName = this.changeToTourName.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChangeGigDate(event) {\r\n        this.setState({\r\n            gig_date: event\r\n        });\r\n    }\r\n\r\n    onChangeGigOrFest(event) {\r\n        this.setState({\r\n            gig_or_fest: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigTourFestName(event) {\r\n        this.setState({\r\n            gig_tourFestName: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigBands(event) {\r\n        this.setState({\r\n            gig_bands: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigVenue(event) {\r\n        this.setState({\r\n            gig_venue: event.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Change any line breaks into a singular string of comma-separated band/artist names.\r\n        this.state.gig_bands = this.state.gig_bands.replace(/[\\n\\r]/g, ', ');\r\n\r\n        const newGig = {\r\n            gig_date: formatGigDate(this.state.gig_date),\r\n            gig_or_fest: this.state.gig_or_fest,\r\n            gig_tourFestName: this.state.gig_tourFestName,\r\n            gig_bands: this.state.gig_bands,\r\n            gig_venue: this.state.gig_venue,\r\n            gig_cancelled: this.state.gig_cancelled\r\n        }\r\n\r\n        // Log to the console details of the new gig.\r\n        console.log(`Form submitted:`);\r\n        console.log(`Date: ${newGig.gig_date}`);\r\n        console.log(`Gig or Fest?: ${newGig.gig_or_fest}`);\r\n        console.log(`Tour/Fest Name: ${newGig.gig_tourFestName}`);\r\n        console.log(`Bands: ${newGig.gig_bands}`);\r\n        console.log(`Venue: ${newGig.gig_venue}`);\r\n\r\n        // Adds to the DB by posting our created newGig object.\r\n        await axios.post('http://localhost:4000/gigs/create', newGig)\r\n            .then(res => console.log(res.data));\r\n\r\n        // Reset the state to empty values.\r\n        this.setState({\r\n            gig_date: Date.now(),\r\n            gig_or_fest: 'Gig',\r\n            gig_tourFestName: '',\r\n            gig_bands: '',\r\n            gig_venue: '',\r\n            gig_cancelled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form\" id=\"gigFormDiv\" style={{ marginTop: 30 }} >\r\n                <h3 id=\"dateHeader\">Date</h3>\r\n                <DatePicker\r\n                    selected={this.state.gig_date}\r\n                    dateFormat={\"d MMMM yyyy\"}\r\n                    onChange={this.onChangeGigDate}\r\n                />\r\n                <form id=\"gigForm\" onSubmit={this.onSubmit}>\r\n                    <div className=\"form-check form-check-inline\">\r\n                        <div style={{ marginTop: 15 }}>\r\n                            <div className=\"form-group\">\r\n                                <div className=\"form-check form-check-inline\">\r\n                                    <input className=\"form-check-input\"\r\n                                        type=\"radio\"\r\n                                        name=\"gigOrFestivalRadios\"\r\n                                        id=\"gigRadio\"\r\n                                        value=\"Gig\"\r\n                                        checked={this.state.gig_or_fest === 'Gig'}\r\n                                        onChange={this.onChangeGigOrFest}\r\n                                    />\r\n                                    <label className=\"form-check-label\">Gig</label>\r\n                                </div>\r\n                                <div className=\"form-check form-check-inline\">\r\n                                    <input className=\"form-check-input\"\r\n                                        type=\"radio\"\r\n                                        name=\"gigOrFestivalRadios\"\r\n                                        id=\"festivalRadio\"\r\n                                        value=\"Festival\"\r\n                                        checked={this.state.gig_or_fest === 'Festival'}\r\n                                        onChange={this.onChangeGigOrFest}\r\n                                    />\r\n                                    <label className=\"form-check-label\">Festival</label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Tour Name:</label>\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"tourName\"\r\n                                    name=\"tourName\"\r\n                                    value={this.state.gig_tourFestName}\r\n                                    onChange={this.onChangeGigTourFestName}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Bands:</label>\r\n                                <textarea className=\"form-control\"\r\n                                    id=\"bands\"\r\n                                    name=\"bands\"\r\n                                    value={this.state.gig_bands}\r\n                                    onChange={this.onChangeGigBands}\r\n                                />\r\n                                <small id=\"bandHelp\"\r\n                                    className=\"form-text text-muted\"\r\n                                    style={{ marginTop: 2 }}>\r\n                                    Please place each band/artist on a new line.\r\n                                    </small>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Venue:</label>\r\n                                <input type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"venueName\"\r\n                                    name=\"venueName\"\r\n                                    value={this.state.gig_venue}\r\n                                    onChange={this.onChangeGigVenue}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <button type=\"submit\" value=\"Create Gig\" className=\"btn btn-primary\">Create Gig</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form >\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n// <button className=\"btn btn-primary\" onClick={this.changeToTourName(true)}>Reset</button>","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { formatGigDate } from \"../Utils.js\";\r\n\r\nexport default class EditGig extends Component {\r\n    constructor(props) {\r\n        // Super refers to the parent class' (Component) constructor.\r\n        // The \"this\" keyword cannot be used until after you have called the parent constructor.\r\n        super(props);\r\n\r\n        this.onChangeGigDate = this.onChangeGigDate.bind(this);\r\n        this.onChangeGigBands = this.onChangeGigBands.bind(this);\r\n        this.onChangeGigOrFest = this.onChangeGigOrFest.bind(this);\r\n        this.onChangeGigTourFestName = this.onChangeGigTourFestName.bind(this);\r\n        this.onChangeGigVenue = this.onChangeGigVenue.bind(this);\r\n        this.onChangeGigCancelled = this.onChangeGigCancelled.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        this.state = {\r\n            gig_date: Date.now(),\r\n            gig_or_fest: '',\r\n            gig_tourFestName: '',\r\n            gig_bands: '',\r\n            gig_venue: '',\r\n            gig_cancelled: false\r\n        }\r\n    }\r\n\r\n    onChangeGigDate(event) {\r\n        this.setState({\r\n            gig_date: event\r\n        });\r\n    }\r\n\r\n    onChangeGigOrFest(event) {\r\n        this.setState({\r\n            gig_or_fest: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigTourFestName(event) {\r\n        this.setState({\r\n            gig_tourFestName: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigBands(event) {\r\n        this.setState({\r\n            gig_bands: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigVenue(event) {\r\n        this.setState({\r\n            gig_venue: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeGigCancelled(event) {\r\n        this.setState({\r\n            gig_cancelled: !this.state.gig_cancelled\r\n        });\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Change any line breaks into a singular string of comma-separated band/artist names.\r\n        this.state.gig_bands = this.state.gig_bands.replace(/[\\n\\r]/g, ', ');\r\n\r\n        // Create a new object containing our updated gig.\r\n        const updatedGig = {\r\n            gig_date: formatGigDate(this.state.gig_date),\r\n            gig_or_fest: this.state.gig_or_fest,\r\n            gig_tourFestName: this.state.gig_tourFestName,\r\n            gig_bands: this.state.gig_bands,\r\n            gig_venue: this.state.gig_venue,\r\n            gig_cancelled: this.state.gig_cancelled\r\n        };\r\n        console.log(updatedGig);\r\n\r\n        // Overwrite the existing data using the given ID.\r\n        // We await here because we want the changes to complete before the user sees the main page again.\r\n        await axios.post('http://localhost:4000/gigs/update/' + this.props.match.params.id, updatedGig)\r\n            .then(res => console.log(res.data));\r\n\r\n        // Change the display back to the main page (Gig List).\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Get the gig from the DB based on the given ID and set it to the current state of the page.\r\n        axios.get('http://localhost:4000/gigs/' + this.props.match.params.id)\r\n            .then(response => {\r\n                this.setState({\r\n                    gig_date: response.data.gig_date === undefined ? Date.now() : new Date(response.data.gig_date),\r\n                    gig_or_fest: response.data.gig_or_fest,\r\n                    gig_tourFestName: response.data.gig_tourFestName,\r\n\r\n                    // Put bands back on separate lines.\r\n                    gig_bands: response.data.gig_bands.replace(/, /g, '\\n'),\r\n                    gig_venue: response.data.gig_venue,\r\n                    gig_cancelled: response.data.gig_cancelled === undefined ? false : response.data.gig_cancelled\r\n                })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form\" id=\"gigFormDiv\">\r\n                <h3>Edit Gig</h3>\r\n                <h3 id=\"dateHeader\">Date</h3>\r\n                <DatePicker\r\n                    selected={this.state.gig_date}\r\n                    dateFormat={\"d MMMM yyyy\"}\r\n                    onChange={this.onChangeGigDate}\r\n                />\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\"\r\n                                type=\"radio\"\r\n                                name=\"gigOrFestivalRadios\"\r\n                                id=\"gigRadio\"\r\n                                value=\"Gig\"\r\n                                checked={this.state.gig_or_fest === 'Gig'}\r\n                                onChange={this.onChangeGigOrFest}\r\n                            />\r\n                            <label className=\"form-check-label\">Gig</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\"\r\n                                type=\"radio\"\r\n                                name=\"gigOrFestivalRadios\"\r\n                                id=\"festivalRadio\"\r\n                                value=\"Festival\"\r\n                                checked={this.state.gig_or_fest === 'Festival'}\r\n                                onChange={this.onChangeGigOrFest}\r\n                            />\r\n                            <label className=\"form-check-label\">Festival</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Tour Name: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.gig_tourFestName}\r\n                            onChange={this.onChangeGigTourFestName}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Bands: </label>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.gig_bands}\r\n                            onChange={this.onChangeGigBands}\r\n                        />\r\n                        <small id=\"bandHelp\"\r\n                            className=\"form-text text-muted\"\r\n                            style={{ marginTop: 2 }}>\r\n                            Please place each band/artist on a new line.\r\n                                    </small>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Venue: </label>\r\n                        <input\r\n                            id=\"venueName\"\r\n                            name=\"venueName\"\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.gig_venue}\r\n                            onChange={this.onChangeGigVenue}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <input className=\"form-check-input\"\r\n                            id=\"gigCancelledCheckbox\"\r\n                            type=\"checkbox\"\r\n                            name=\"gigCancelledCheckbox\"\r\n                            onChange={this.onChangeGigCancelled}\r\n                            checked={this.state.gig_cancelled}\r\n                            value={this.state.gig_cancelled}\r\n                        />\r\n                        <label className=\"form-check-label\" htmlFor=\"gigCancelledCheckbox\">\r\n                            Cancelled\r\n                        </label>\r\n                    </div>\r\n                    <br />\r\n\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Edit Gig\" className=\"btn btn-primary\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst Gig = props => (\r\n    <tr>\r\n        <td className={props.gig.gig_cancelled ? 'cancelled' : ''}>{props.gig.gig_date}</td>\r\n        <td className={props.gig.gig_cancelled ? 'cancelled' : ''}>{props.gig.gig_or_fest}</td>\r\n        <td className={props.gig.gig_cancelled ? 'cancelled' : ''}>{props.gig.gig_tourFestName}</td>\r\n        <td className={props.gig.gig_cancelled ? 'cancelled' : ''}>{props.gig.gig_bands}</td>\r\n        <td className={props.gig.gig_cancelled ? 'cancelled' : ''}>{props.gig.gig_venue}</td>\r\n        <td>\r\n            <Link to={\"/edit/\" + props.gig._id}>Edit</Link>\r\n        </td>\r\n        <td>\r\n            <Link to='/' onClick={() => {\r\n                if (window.confirm(`Are you sure you wish to delete this gig? (${props.gig.gig_tourFestName})`)) {\r\n                    window.location.href = \"/delete/\" + props.gig._id;\r\n                }\r\n            }}>Delete</Link>\r\n        </td>\r\n    </tr>\r\n)\r\n\r\nexport default class GigList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { gigs: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Get the list of gigs from the database and assigns the data to the component state.\r\n        axios.get('http://localhost:4000/gigs/')\r\n            .then(response => {\r\n                this.setState({ gigs: response.data });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    gigList() {\r\n        // Sort gigs chronologically.\r\n        let chronologicalGigs = this.state.gigs.sort((a, b) => new Date(a.gig_date) - new Date(b.gig_date));\r\n\r\n        // Map each gig in the list so that the information is displayed across each row.\r\n        return chronologicalGigs.map(function (currentGig, i) {\r\n            return <Gig gig={currentGig} key={i} />;\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Gig List</h3>\r\n                <table className=\"table table-striped\" style={{ marginTop: 20 }} >\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Date</th>\r\n                            <th>Gig/Festival</th>\r\n                            <th>Name</th>\r\n                            <th style={{ width: '35%' }}>Bands</th>\r\n                            <th>Venue</th>\r\n                            <th></th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.gigList()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class DeleteGig extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.deleteGig = this.deleteGig.bind(this);\r\n\r\n        this.deleteGig(this.props.match.params.id)\r\n    }\r\n\r\n    deleteGig = async (id) => {\r\n        // Delete the gig at the specified ID.\r\n        await axios.delete('http://localhost:4000/gigs/delete/' + id)\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n        // Change the display back to the main page (Gig List).\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        // Don't render anything.\r\n        return null;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport CreateGig from \"./components/create-gig.component\";\r\nimport EditGig from \"./components/edit-gig.component\";\r\nimport GigList from \"./components/gig-list.component\";\r\nimport DeleteGig from \"./components/delete-gig.component\";\r\n\r\nimport logo from \"./logo.svg\"\r\n\r\nclass App extends Component {\r\n    // Renders the main page of the app.\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <div className=\"container\">\r\n                    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                        <a className=\"navbar-brand\" target=\"_blank\">\r\n                            <img src={logo} width=\"30\" height=\"30\" href=\"http://google.com\" />\r\n                        </a>\r\n                        <Link to=\"/\" className=\"navbar-brand\">Gig Tracker</Link>\r\n                        <div className=\"collpase navbar-collapse\">\r\n                            <ul className=\"navbar-nav mr-auto\">\r\n                                <li className=\"navbar-item\">\r\n                                    <Link to=\"/\" className=\"nav-link\">Gigs</Link>\r\n                                </li>\r\n                                <li className=\"navbar-item\">\r\n                                    <Link to=\"/create\" className=\"nav-link\">Create Gig</Link>\r\n                                </li>\r\n                                <li className=\"navbar-item\">\r\n                                    <Link to=\"/\" className=\"nav-link\">Calendar</Link>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </nav>\r\n                    <br />\r\n                    {/* Sets up the webpage paths to each component. */}\r\n                    <Route path=\"/\" exact component={GigList} />\r\n                    <Route path=\"/edit/:id\" component={EditGig} />\r\n                    <Route path=\"/create\" component={CreateGig} />\r\n                    <Route path=\"/delete/:id\" component={DeleteGig} />\r\n                </div>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}